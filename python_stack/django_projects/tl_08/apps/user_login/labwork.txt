User.objects.create(first_name="Wilma", last_name="Flintstone", email_address="wilmaf@bedrock.usa", age=33)
User.objects.create(first_name="Barney", last_name="Rubble", email_address="barneyr@bedrock.usa", age=34)
User.objects.create(first_name="Betty", last_name="Rubble", email_address="bettyr@bedrock.usa", age=33)
User.objects.create(first_name="Bam Bam", last_name="Rubble", email_address="bambamr@bedrock.usa", age=3)
User.objects.create(first_name="Pebbles", last_name="Flintstone", email_address="pebblesf@bedrock.usa", age=3)
User.objects.create(first_name="Great", last_name="Gazoo", email_address="gazoo@outerspace.uk", age=99999)
User.objects.create(first_name="G", last_name="Gazoo", email_address="gazoo@outerspace.uk", age=99999)
User.objects.create(first_name="Great", last_name="G", email_address="gazoo@outerspace.uk", age=99999)
User.objects.create(first_name="Great", last_name="Gazoo", email_address="gazoo.uk", age=99999)


Dojo.objects.create(name="CodingDojo Silicon Valley", city="Mountain View", state="CA")
Dojo.objects.create(name="CodingDojo Seattle", city="Seattle", state="WA")
Dojo.objects.create(name="CodingDojo New York", city="New Yorkw", state="NY")

Ninja.objects.create(dojo_id=4, first_name="Perry", last_name="White")
Ninja.objects.create(dojo_id=4, first_name="Clark", last_name="Kent")
Ninja.objects.create(dojo_id=4, first_name="Lois", last_name="Lane")
Ninja.objects.create(dojo_id=5, first_name="Oliver", last_name="Queen")
Ninja.objects.create(dojo_id=5, first_name="Daniel", last_name="Jackson")
Ninja.objects.create(dojo_id=5, first_name="Samantha", last_name="Carter")
Ninja.objects.create(dojo_id=6, first_name="Steve", last_name="Wozniak")
Ninja.objects.create(dojo_id=6, first_name="Lisa", last_name="Jobs")
Ninja.objects.create(dojo_id=6, first_name="Arnold", last_name="Schwarzenegger")





User.objects.order_by("created_at").values()
User.objects.order_by("-created_at").values()
User.objects.raw("SELECT * from user_login_user")
first33 = User.objects.raw("SELECT * from user_login_user WHERE age=33")[0]

>>> first33 = User.objects.raw("SELECT * from user_login_user WHERE age=33")[1]
>>> first33.first_name
u'Betty'

u = User.objects.get(id=7)
u.delete()



(djangoPy27Env) Freds-MacBook-Pro:tl_08 fred$ python manage.py shell
Python 2.7.10 (default, Oct  6 2017, 22:29:07)
[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.31)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from apps.dojo_ninjas.models import *
>>> Dojo.objects.create(name="CodingDojo Silicon Valley", city="Mountain View", state="CA")
<Dojo: Dojo object>
>>> Dojo.objects.create(name="CodingDojo Seattle", city="Seattle", state="WA")
<Dojo: Dojo object>
>>> Dojo.objects.create(name="CodingDojo New York", city="New Yorkw", state="NY")
<Dojo: Dojo object>
>>> Dojo.objects.values()
<QuerySet [{'city': u'Mountain View', 'state': u'CA', u'id': 4, 'name': u'CodingDojo Silicon Valley'}, {'city': u'Seattle', 'state': u'WA', u'id': 5, 'name': u'CodingDojo Seattle'}, {'city': u'New Yorkw', 'state': u'NY', u'id': 6, 'name': u'CodingDojo New York'}]>
>>> Ninja.objects.create(dojo_id=4, first_name="Perry", last_name="White")
<Ninja: Ninja object>
>>> Ninja.objects.create(dojo_id=4, first_name="Clark", last_name="Kent")
<Ninja: Ninja object>
>>> Ninja.objects.create(dojo_id=4, first_name="Lois", last_name="Lane")
<Ninja: Ninja object>
>>> Ninja.objects.create(dojo_id=5, first_name="Oliver", last_name="Queen")
<Ninja: Ninja object>
>>> Ninja.objects.create(dojo_id=5, first_name="Daniel", last_name="Jackson")
<Ninja: Ninja object>
>>> Ninja.objects.create(dojo_id=5, first_name="Samantha", last_name="Carter")
<Ninja: Ninja object>
>>> Ninja.objects.create(dojo_id=6, first_name="Steve", last_name="Wozniak")
<Ninja: Ninja object>
>>> Ninja.objects.create(dojo_id=6, first_name="Lisa", last_name="Jobs")
<Ninja: Ninja object>
>>> Ninja.objects.create(dojo_id=6, first_name="Arnold", last_name="Schwarzenegger")
<Ninja: Ninja object>
>>> Ninja.objects.all()
<QuerySet [<Ninja: Ninja object>, <Ninja: Ninja object>, <Ninja: Ninja object>, <Ninja: Ninja object>, <Ninja: Ninja object>, <Ninja: Ninja object>, <Ninja: Ninja object>, <Ninja: Ninjaobject>, <Ninja: Ninja object>]>
>>> Ninja.objects.values()
<QuerySet [{u'dojo_id': 4, 'first_name': u'Perry', 'last_name': u'White', u'id': 1}, {u'dojo_id': 4, 'first_name': u'Clark', 'last_name': u'Kent', u'id': 2}, {u'dojo_id': 4, 'first_name': u'Lois', 'last_name': u'Lane', u'id': 3}, {u'dojo_id': 5, 'first_name': u'Oliver', 'last_name': u'Queen', u'id': 4}, {u'dojo_id': 5, 'first_name': u'Daniel', 'last_name': u'Jackson', u'id': 5}, {u'dojo_id': 5, 'first_name': u'Samantha', 'last_name': u'Carter', u'id': 6}, {u'dojo_id': 6, 'first_name': u'Steve', 'last_name': u'Wozniak', u'id': 7}, {u'dojo_id': 6, 'first_name': u'Lisa', 'last_name': u'Jobs', u'id': 8}, {u'dojo_id': 6, 'first_name': u'Arnold', 'last_name': u'Schwarzenegger', u'id': 9}]>
>>> Dojo.objects.first().ninjas.all()
<QuerySet [<Ninja: Ninja object>, <Ninja: Ninja object>, <Ninja: Ninja object>]>
>>> Dojo.objects.first().ninjas.values()
<QuerySet [{u'dojo_id': 4, 'first_name': u'Perry', 'last_name': u'White', u'id': 1}, {u'dojo_id': 4, 'first_name': u'Clark', 'last_name': u'Kent', u'id': 2}, {u'dojo_id': 4, 'first_name': u'Lois', 'last_name': u'Lane', u'id': 3}]>
>>> Dojo.objects.last().ninjas.values()
<QuerySet [{u'dojo_id': 6, 'first_name': u'Steve', 'last_name': u'Wozniak', u'id': 7}, {u'dojo_id': 6, 'first_name': u'Lisa', 'last_name': u'Jobs', u'id': 8}, {u'dojo_id': 6, 'first_name': u'Arnold', 'last_name': u'Schwarzenegger', u'id': 9}]>
>>> Ninja.objects.first().dojo
<Dojo: Dojo object>
>>>

------------------ BOOKS AUTHORS -------------

Book.objects.create(name="C Sharp", desc="The definitive work on the subject of C Sharp")
Book.objects.create(name="Java", desc="A beginners guide to the Java Programming Language")
Book.objects.create(name="Python", desc="A Hacker-Centric tome on Python")
Book.objects.create(name="PHP", desc="If you only read one book on PHP, make it this one")
Book.objects.create(name="Ruby", desc="There are plenty of books about Ruby, this is right up there with the best")

Author.objects.create(first_name="Mike", last_name="Flintstone", email="mikef@bedrock.usa")
Author.objects.create(first_name="Speros", last_name="Rubble", email="sperosr@bedrock.usa")
Author.objects.create(first_name="John", last_name="Rubble", email="johnr@bedrock.usa")
Author.objects.create(first_name="Jadee", last_name="Rubble", email="jadeer@bedrock.usa")
Author.objects.create(first_name="Jay", last_name="Flintstone", email="jayf@bedrock.usa")

>>> Book.objects.get(id=2).authors.values()
<QuerySet [{'first_name': u'Mike', 'last_name': u'Flintstone', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12, 23, 37, 35, 401206, tzinfo=<UTC>), u'id': 1, 'email': u'mikef@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 37, 35, 401120, tzinfo=<UTC>)}, {'first_name': u'John', 'last_name': u'Rubble', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12, 23, 37, 51, 826946, tzinfo=<UTC>), u'id': 3, 'email': u'johnr@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 37, 51, 826871, tzinfo=<UTC>)}, {'first_name': u'Jadee', 'last_name': u'Rubble', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12, 23, 38, 1, 266537, tzinfo=<UTC>), u'id': 4, 'email': u'jadeer@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 38, 1, 266463, tzinfo=<UTC>)}, {'first_name': u'Ketul', 'last_name': u'Flintstone', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12,23, 44, 16, 43478, tzinfo=<UTC>), u'id': 5, 'email': u'jayf@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 38, 8, 787293, tzinfo=<UTC>)}]>
>>> Author.objects.get(id=3).books.values()
<QuerySet [{'updated_at': datetime.datetime(2018, 10, 13, 0, 30, 15, 43735, tzinfo=<UTC>), 'created_at': datetime.datetime(2018, 10, 13, 0, 23, 53, 228087, tzinfo=<UTC>), 'desc': u'The definitive work on the subject of C Sharp', u'id': 1, 'name': u'C Sharp'}, {'updated_at': datetime.datetime(2018, 10, 13, 0, 32, 21, 394803, tzinfo=<UTC>), 'created_at': datetime.datetime(2018, 10, 13, 0, 32, 21, 394748, tzinfo=<UTC>), 'desc': u'A beginners guide to the Java Programming Language', u'id': 2, 'name': u'Java'}, {'updated_at': datetime.datetime(2018, 10, 13, 0, 34, 2, 175699, tzinfo=<UTC>), 'created_at': datetime.datetime(2018, 10, 13, 0, 34, 2, 175655, tzinfo=<UTC>), 'desc': u'A Hacker-Centric tome on Python', u'id': 3, 'name': u'Python'}, {'updated_at': datetime.datetime(2018, 10, 13, 0, 35, 3, 934450, tzinfo=<UTC>), 'created_at': datetime.datetime(2018, 10, 13, 0, 35, 3, 934384, tzinfo=<UTC>), 'desc': u'If you only read one book on PHP, make it this one', u'id': 4, 'name': u'PHP'}]>
>>> Author.objects.get(id=2).books.values()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/Users/fred/Dev/dojo/python_stack/myEnvironments/djangoPy27Env/lib/python2.7/site-packages/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/fred/Dev/dojo/python_stack/myEnvironments/djangoPy27Env/lib/python2.7/site-packages/django/db/models/query.py", line 379, in get
    self.model._meta.object_name
DoesNotExist: Author matching query does not exist.
>>> Author.objects.get(id=2).books.values()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/Users/fred/Dev/dojo/python_stack/myEnvironments/djangoPy27Env/lib/python2.7/site-packages/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/fred/Dev/dojo/python_stack/myEnvironments/djangoPy27Env/lib/python2.7/site-packages/django/db/models/query.py", line 379, in get
    self.model._meta.object_name
DoesNotExist: Author matching query does not exist.
>>> Book.objects.get(id=2).authors.values()
<QuerySet [{'first_name': u'Mike', 'last_name': u'Flintstone', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12, 23, 37, 35, 401206, tzinfo=<UTC>), u'id': 1, 'email': u'mikef@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 37, 35, 401120, tzinfo=<UTC>)}, {'first_name': u'John', 'last_name': u'Rubble', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12, 23, 37, 51, 826946, tzinfo=<UTC>), u'id': 3, 'email': u'johnr@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 37, 51, 826871, tzinfo=<UTC>)}, {'first_name': u'Jadee', 'last_name': u'Rubble', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12, 23, 38, 1, 266537, tzinfo=<UTC>), u'id': 4, 'email': u'jadeer@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 38, 1, 266463, tzinfo=<UTC>)}, {'first_name': u'Ketul', 'last_name': u'Flintstone', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12,23, 44, 16, 43478, tzinfo=<UTC>), u'id': 5, 'email': u'jayf@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 38, 8, 787293, tzinfo=<UTC>)}]>
>>> Book.objects.get(id=2).authors.count()
4
>>> Book.objects.get(id=2).authors.values()
<QuerySet [{'first_name': u'Mike', 'last_name': u'Flintstone', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12, 23, 37, 35, 401206, tzinfo=<UTC>), u'id': 1, 'email': u'mikef@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 37, 35, 401120, tzinfo=<UTC>)}, {'first_name': u'John', 'last_name': u'Rubble', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12, 23, 37, 51, 826946, tzinfo=<UTC>), u'id': 3, 'email': u'johnr@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 37, 51, 826871, tzinfo=<UTC>)}, {'first_name': u'Jadee', 'last_name': u'Rubble', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12, 23, 38, 1, 266537, tzinfo=<UTC>), u'id': 4, 'email': u'jadeer@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 38, 1, 266463, tzinfo=<UTC>)}, {'first_name': u'Ketul', 'last_name': u'Flintstone', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12,23, 44, 16, 43478, tzinfo=<UTC>), u'id': 5, 'email': u'jayf@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 38, 8, 787293, tzinfo=<UTC>)}]>
>>> Author.objects.get(id=3).books
<django.db.models.fields.related_descriptors.ManyRelatedManager object at 0x101ad8690>
>>> Author.objects.get(id=3).books.values()
<QuerySet [{'updated_at': datetime.datetime(2018, 10, 13, 0, 30, 15, 43735, tzinfo=<UTC>), 'created_at': datetime.datetime(2018, 10, 13, 0, 23, 53, 228087, tzinfo=<UTC>), 'desc': u'The definitive work on the subject of C Sharp', u'id': 1, 'name': u'C Sharp'}, {'updated_at': datetime.datetime(2018, 10, 13, 0, 32, 21, 394803, tzinfo=<UTC>), 'created_at': datetime.datetime(2018, 10, 13, 0, 32, 21, 394748, tzinfo=<UTC>), 'desc': u'A beginners guide to the Java Programming Language', u'id': 2, 'name': u'Java'}, {'updated_at': datetime.datetime(2018, 10, 13, 0, 34, 2, 175699, tzinfo=<UTC>), 'created_at': datetime.datetime(2018, 10, 13, 0, 34, 2, 175655, tzinfo=<UTC>), 'desc': u'A Hacker-Centric tome on Python', u'id': 3, 'name': u'Python'}, {'updated_at': datetime.datetime(2018, 10, 13, 0, 35, 3, 934450, tzinfo=<UTC>), 'created_at': datetime.datetime(2018, 10, 13, 0, 35, 3, 934384, tzinfo=<UTC>), 'desc': u'If you only read one book on PHP, make it this one', u'id': 4, 'name': u'PHP'}]>
>>> Author.objects.get(id=2).books.values()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/Users/fred/Dev/dojo/python_stack/myEnvironments/djangoPy27Env/lib/python2.7/site-packages/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/fred/Dev/dojo/python_stack/myEnvironments/djangoPy27Env/lib/python2.7/site-packages/django/db/models/query.py", line 379, in get
    self.model._meta.object_name
DoesNotExist: Author matching query does not exist.
>>> Author.objects.get(id=2).books.count()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/Users/fred/Dev/dojo/python_stack/myEnvironments/djangoPy27Env/lib/python2.7/site-packages/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/fred/Dev/dojo/python_stack/myEnvironments/djangoPy27Env/lib/python2.7/site-packages/django/db/models/query.py", line 379, in get
    self.model._meta.object_name
DoesNotExist: Author matching query does not exist.
>>> Author.objects.values()
<QuerySet [{'first_name': u'Mike', 'last_name': u'Flintstone', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12, 23, 37, 35, 401206, tzinfo=<UTC>), u'id': 1, 'email': u'mikef@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 37, 35, 401120, tzinfo=<UTC>)}, {'first_name': u'John', 'last_name': u'Rubble', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12, 23, 37, 51, 826946, tzinfo=<UTC>), u'id': 3, 'email': u'johnr@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 37, 51, 826871, tzinfo=<UTC>)}, {'first_name': u'Jadee', 'last_name': u'Rubble', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12, 23, 38, 1, 266537, tzinfo=<UTC>), u'id': 4, 'email': u'jadeer@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 38, 1, 266463, tzinfo=<UTC>)}, {'first_name': u'Ketul', 'last_name': u'Flintstone', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12,23, 44, 16, 43478, tzinfo=<UTC>), u'id': 5, 'email': u'jayf@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 38, 8, 787293, tzinfo=<UTC>)}]>
>>> Author.objects.create(first_name="Speros", last_name="Rubble", email="sperosr@bedrock.usa")
<Author: Author object>
>>> Author.objects.values()
<QuerySet [{'first_name': u'Mike', 'last_name': u'Flintstone', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12, 23, 37, 35, 401206, tzinfo=<UTC>), u'id': 1, 'email': u'mikef@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 37, 35, 401120, tzinfo=<UTC>)}, {'first_name': u'John', 'last_name': u'Rubble', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12, 23, 37, 51, 826946, tzinfo=<UTC>), u'id': 3, 'email': u'johnr@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 37, 51, 826871, tzinfo=<UTC>)}, {'first_name': u'Jadee', 'last_name': u'Rubble', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12, 23, 38, 1, 266537, tzinfo=<UTC>), u'id': 4, 'email': u'jadeer@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 38, 1, 266463, tzinfo=<UTC>)}, {'first_name': u'Ketul', 'last_name': u'Flintstone', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12,23, 44, 16, 43478, tzinfo=<UTC>), u'id': 5, 'email': u'jayf@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 38, 8, 787293, tzinfo=<UTC>)}, {'first_name': u'Speros', 'last_name': u'Rubble', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 13, 1, 4, 6, 601474, tzinfo=<UTC>), u'id': 6, 'email': u'sperosr@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 13, 1, 4, 6, 601428, tzinfo=<UTC>)}]>
>>> a = Author.objects.get(id=6)
>>> a.id =  2
>>> a.save()
>>> Author.objects.values()
<QuerySet [{'first_name': u'Mike', 'last_name': u'Flintstone', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12, 23, 37, 35, 401206, tzinfo=<UTC>), u'id': 1, 'email': u'mikef@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 37, 35, 401120, tzinfo=<UTC>)}, {'first_name': u'Speros', 'last_name': u'Rubble', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 13, 1, 4, 34, 731731, tzinfo=<UTC>), u'id': 2, 'email': u'sperosr@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 13, 1, 4, 34, 731675, tzinfo=<UTC>)}, {'first_name': u'John', 'last_name': u'Rubble', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12, 23, 37, 51, 826946, tzinfo=<UTC>), u'id': 3, 'email': u'johnr@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 37, 51, 826871, tzinfo=<UTC>)}, {'first_name': u'Jadee', 'last_name': u'Rubble', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12, 23,38, 1, 266537, tzinfo=<UTC>), u'id': 4, 'email': u'jadeer@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 38, 1, 266463, tzinfo=<UTC>)}, {'first_name': u'Ketul', 'last_name': u'Flintstone', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12, 23, 44, 16, 43478, tzinfo=<UTC>), u'id': 5, 'email': u'jayf@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 38, 8, 787293, tzinfo=<UTC>)}, {'first_name': u'Speros', 'last_name': u'Rubble', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 13, 1, 4, 6, 601474, tzinfo=<UTC>), u'id': 6, 'email': u'sperosr@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 13, 1, 4, 6, 601428, tzinfo=<UTC>)}]>
>>> a = Author.objects.get(id=6)
>>> a.delete()
(1, {u'books_authors.Author': 1, u'books_authors.Author_books': 0})
>>> Author.objects.values()
<QuerySet [{'first_name': u'Mike', 'last_name': u'Flintstone', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12, 23, 37, 35, 401206, tzinfo=<UTC>), u'id': 1, 'email': u'mikef@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 37, 35, 401120, tzinfo=<UTC>)}, {'first_name': u'Speros', 'last_name': u'Rubble', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 13, 1, 4, 34, 731731, tzinfo=<UTC>), u'id': 2, 'email': u'sperosr@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 13, 1, 4, 34, 731675, tzinfo=<UTC>)}, {'first_name': u'John', 'last_name': u'Rubble', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12, 23, 37, 51, 826946, tzinfo=<UTC>), u'id': 3, 'email': u'johnr@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 37, 51, 826871, tzinfo=<UTC>)}, {'first_name': u'Jadee', 'last_name': u'Rubble', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12, 23,38, 1, 266537, tzinfo=<UTC>), u'id': 4, 'email': u'jadeer@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 38, 1, 266463, tzinfo=<UTC>)}, {'first_name': u'Ketul', 'last_name': u'Flintstone', 'notes': None, 'updated_at': datetime.datetime(2018, 10, 12, 23, 44, 16, 43478, tzinfo=<UTC>), u'id': 5, 'email': u'jayf@bedrock.usa', 'created_at': datetime.datetime(2018, 10, 12, 23, 38, 8, 787293, tzinfo=<UTC>)}]>
>>> Author.objects.first(id=2).books = Book.objects.filter(id__lt=4)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/Users/fred/Dev/dojo/python_stack/myEnvironments/djangoPy27Env/lib/python2.7/site-packages/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
TypeError: first() got an unexpected keyword argument 'id'
>>> Author.objects.get(id=2).books = Book.objects.filter(id__lt=4)
>>> Author.objects.get(id=2).books.count()
3
>>> Author.objects.get(id=2).books.values()
<QuerySet [{'updated_at': datetime.datetime(2018, 10, 13, 0, 30, 15, 43735, tzinfo=<UTC>), 'created_at': datetime.datetime(2018, 10, 13, 0, 23, 53, 228087, tzinfo=<UTC>), 'desc': u'The definitive work on the subject of C Sharp', u'id': 1, 'name': u'C Sharp'}, {'updated_at': datetime.datetime(2018, 10, 13, 0, 32, 21, 394803, tzinfo=<UTC>), 'created_at': datetime.datetime(2018, 10, 13, 0, 32, 21, 394748, tzinfo=<UTC>), 'desc': u'A beginners guide to the Java Programming Language', u'id': 2, 'name': u'Java'}, {'updated_at': datetime.datetime(2018, 10, 13, 0, 34, 2, 175699, tzinfo=<UTC>), 'created_at': datetime.datetime(2018, 10, 13, 0, 34, 2, 175655, tzinfo=<UTC>), 'desc': u'A Hacker-Centric tome on Python', u'id': 3, 'name': u'Python'}]>

------------------------ LIKES BOOKS ------------------------

User.objects.create(first_name="Wilma", last_name="Flintstone", email="wilmaf@bedrock.usa")
User.objects.create(first_name="Barney", last_name="Rubble", email="barneyr@bedrock.usa")
User.objects.create(first_name="Betty", last_name="Rubble", email="bettyr@bedrock.usa")
User.objects.create(first_name="Bam Bam", last_name="Rubble", email="bambamr@bedrock.usa")
User.objects.create(first_name="Pebbles", last_name="Flintstone", email="pebblesf@bedrock.usa")
User.objects.create(first_name="Great", last_name="Gazoo", email="gazoo@outerspace.uk")

Book.objects.create(name="C Sharp", desc="The definitive work on the subject of C Sharp", uploaded_by_id=1)
Book.objects.create(name="Java", desc="A beginners guide to the Java Programming Language", uploaded_by_id=2)
Book.objects.create(name="Python", desc="A Hacker-Centric tome on Python", uploaded_by_id=3)
Book.objects.create(name="PHP", desc="If you only read one book on PHP, make it this one", uploaded_by_id=4)
Book.objects.create(name="Ruby", desc="There are plenty of books about Ruby, this is right up there with the best", uploaded_by_id=5)
Book.objects.create(name="COBOL", desc="If you learn this language, you can always get a job at an old bank!", uploaded_by_id=6)
Book.objects.create(name="Pascal", desc="This book was written for those people who like dead languages", uploaded_by_id=2)
Book.objects.create(name="Classic Visual Basic", desc="Make sure no one sees you buying this book, but take it home and treasure it!", uploaded_by_id=4)
Book.objects.create(name="Lisp", desc="If you need this book, you should think seriously about your life choices.", uploaded_by=User.objects.get(id=6))


>>> Book.objects.create(name="C Sharp", desc="The definitive work on the subject of C Sharp", uploaded_by_id=1)
<Book: Book object>
>>> Book.objects.create(name="Java", desc="A beginners guide to the Java Programming Language", uploaded_by_id=2)
<Book: Book object>
>>> Book.objects.create(name="Python", desc="A Hacker-Centric tome on Python", uploaded_by_id=3)
<Book: Book object>
>>> Book.objects.create(name="PHP", desc="If you only read one book on PHP, make it this one", uploaded_by_id=4)
<Book: Book object>
>>> Book.objects.create(name="Ruby", desc="There are plenty of books about Ruby, this is right up there with the best", uploaded_by_id=5)
<Book: Book object>
>>> Book.objects.create(name="COBOL", desc="If you learn this language, you can always get a job at an old bank!", uploaded_by_id=6)
<Book: Book object>
>>> Book.objects.create(name="Pascal", desc="This book was written for those people who like dead languages", uploaded_by_id=2)
<Book: Book object>
>>> Book.objects.create(name="Classic Visual Basic", desc="Make sure no one sees you buying this book, but take it home and treasure it!", uploaded_by_id=4)
<Book: Book object>
>>> Book.objects.count()
8
>>> Book.objects.first().uploaded_by
<User: User object>
>>> Book.objects.first().uploaded_by.values()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'User' object has no attribute 'values'
>>> Book.objects.first().values(0
... Book.objects.first().values()
  File "<console>", line 2
    Book.objects.first().values()
       ^
SyntaxError: invalid syntax
>>> b = Book.objects.first()
>>> b.name
u'C Sharp'
>>> Book.objects.first().name
u'C Sharp'
>>> Book.objects.first().values()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Book' object has no attribute 'values'
>>> b = Book.objects.first()
>>> b.values()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Book' object has no attribute 'values'
>>> b = Book.objects.values()
>>> b
<QuerySet [{'name': u'C Sharp', 'created_at': datetime.datetime(2018, 10, 13, 1, 45, 54, 72745, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 1, 45, 54, 72822, tzinfo=<UTC>), u'uploaded_by_id': 1, u'id': 1, 'desc': u'The definitive work on the subject of C Sharp'}, {'name': u'Java', 'created_at': datetime.datetime(2018, 10, 13, 1, 46, 15, 911359, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 1, 46, 15, 911435, tzinfo=<UTC>), u'uploaded_by_id': 2, u'id': 2, 'desc': u'A beginners guide to the Java Programming Language'}, {'name': u'Python', 'created_at': datetime.datetime(2018, 10, 13, 1, 46, 23, 159297, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 1, 46, 23, 159358, tzinfo=<UTC>), u'uploaded_by_id': 3, u'id': 3, 'desc': u'A Hacker-Centric tome on Python'}, {'name': u'PHP', 'created_at': datetime.datetime(2018, 10, 13, 1, 46, 30, 279205, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 1, 46, 30, 279282, tzinfo=<UTC>), u'uploaded_by_id': 4, u'id': 4, 'desc': u'If you only read one book on PHP, make it this one'}, {'name': u'Ruby', 'created_at': datetime.datetime(2018, 10, 13, 1, 46, 38, 406215, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 1, 46, 38, 406278, tzinfo=<UTC>), u'uploaded_by_id': 5, u'id': 5, 'desc': u'There are plenty of books about Ruby, this is right up there with the best'}, {'name': u'COBOL', 'created_at': datetime.datetime(2018, 10, 13, 1, 46, 46, 807427, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 1, 46, 46, 807502, tzinfo=<UTC>), u'uploaded_by_id': 6, u'id': 6, 'desc': u'If you learn this language, you can always get a job at an old bank!'}, {'name': u'Pascal', 'created_at': datetime.datetime(2018, 10, 13, 1, 46, 55, 383610, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 1, 46, 55, 383708, tzinfo=<UTC>), u'uploaded_by_id': 2, u'id': 7, 'desc': u'This book was written for those people who like dead languages'}, {'name': u'Classic Visual Basic', 'created_at': datetime.datetime(2018, 10, 13, 1, 47, 7, 207590, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 1, 47, 7, 207664, tzinfo=<UTC>), u'uploaded_by_id': 4, u'id': 8, 'desc': u'Make sure no one sees you buying this book, but take it home and treasure it!'}]>
>>> Book.objects.first().uploaded_by_id
1
>>> Book.objects.create(name="Lisp", desc="If you need this book, you should think seriously about your life choices.", uploaded_by=User.objects.get(id=6))
<Book: Book object>
>>> Book.objects.first().uploaded_by
<User: User object>
>>> Book.objects.first().uploaded_by.count()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'User' object has no attribute 'count'
>>> Book.objects.values()
<QuerySet [{'name': u'C Sharp', 'created_at': datetime.datetime(2018, 10, 13, 1, 45, 54, 72745, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 1, 45, 54, 72822, tzinfo=<UTC>), u'uploaded_by_id': 1, u'id': 1, 'desc': u'The definitive work on the subject of C Sharp'}, {'name': u'Java', 'created_at': datetime.datetime(2018, 10, 13, 1, 46, 15, 911359, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 1, 46, 15, 911435, tzinfo=<UTC>), u'uploaded_by_id': 2, u'id': 2, 'desc': u'A beginners guide to the Java Programming Language'}, {'name': u'Python', 'created_at': datetime.datetime(2018, 10, 13, 1, 46, 23, 159297, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 1, 46, 23, 159358, tzinfo=<UTC>), u'uploaded_by_id': 3, u'id': 3, 'desc': u'A Hacker-Centric tome on Python'}, {'name': u'PHP', 'created_at': datetime.datetime(2018, 10, 13, 1, 46, 30, 279205, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 1, 46, 30, 279282, tzinfo=<UTC>), u'uploaded_by_id': 4, u'id': 4, 'desc': u'If you only read one book on PHP, make it this one'}, {'name': u'Ruby', 'created_at': datetime.datetime(2018, 10, 13, 1, 46, 38, 406215, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 1, 46, 38, 406278, tzinfo=<UTC>), u'uploaded_by_id': 5, u'id': 5, 'desc': u'There are plenty of books about Ruby, this is right up there with the best'}, {'name': u'COBOL', 'created_at': datetime.datetime(2018, 10, 13, 1, 46, 46, 807427, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 1, 46, 46, 807502, tzinfo=<UTC>), u'uploaded_by_id': 6, u'id': 6, 'desc': u'If you learn this language, you can always get a job at an old bank!'}, {'name': u'Pascal', 'created_at': datetime.datetime(2018, 10, 13, 1, 46, 55, 383610, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 1, 46, 55, 383708, tzinfo=<UTC>), u'uploaded_by_id': 2, u'id': 7, 'desc': u'This book was written for those people who like dead languages'}, {'name': u'Classic Visual Basic', 'created_at': datetime.datetime(2018, 10, 13, 1, 47, 7, 207590, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 1, 47, 7, 207664, tzinfo=<UTC>), u'uploaded_by_id': 4, u'id': 8, 'desc': u'Make sure no one sees you buying this book, but take it home and treasure it!'}, {'name': u'Lisp', 'created_at': datetime.datetime(2018, 10, 13, 2, 4, 45, 538963, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 2, 4, 45, 539018, tzinfo=<UTC>), u'uploaded_by_id': 6, u'id': 9, 'desc': u'If you need this book, you should think seriously about your life choices.'}]>
>>> first_user = Book.objects.first().uploaded_by
>>> first_user.values()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'User' object has no attribute 'values'
>>> first_user.first_name
u'Wilma'
>>> books_list = User.objects.get(id=6).books_uploaded
>>> books_list.values()
<QuerySet [{'name': u'COBOL', 'created_at': datetime.datetime(2018, 10, 13, 1, 46, 46, 807427, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 1, 46, 46, 807502, tzinfo=<UTC>), u'uploaded_by_id': 6, u'id': 6, 'desc': u'If you learn this language, you can always get a job at an old bank!'}, {'name': u'Lisp', 'created_at': datetime.datetime(2018, 10, 13, 2, 4, 45, 538963, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 2, 4, 45, 539018, tzinfo=<UTC>), u'uploaded_by_id': 6, u'id': 9, 'desc': u'If you need this book, you should think seriously about your life choices.'}]>
>>> User.objects.first().liked_books
<django.db.models.fields.related_descriptors.ManyRelatedManager object at 0x10fb155d0>
>>> User.objects.first().liked_books.values()
<QuerySet []>
>>> b1 = Book.objects.first()
>>> User.objects.first().liked_books.add(b1)
>>> User.objects.first().liked_books.values()
<QuerySet [{'name': u'C Sharp', 'created_at': datetime.datetime(2018, 10, 13, 1, 45, 54, 72745, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 1, 45, 54, 72822, tzinfo=<UTC>), u'uploaded_by_id': 1, u'id': 1, 'desc': u'The definitive work on the subject of C Sharp'}]>
>>> User.objects.first().liked_books.add(Book.objects.last())
>>> User.objects.first().liked_books.values()
<QuerySet [{'name': u'C Sharp', 'created_at': datetime.datetime(2018, 10, 13, 1, 45, 54, 72745, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 1, 45, 54, 72822, tzinfo=<UTC>), u'uploaded_by_id': 1, u'id': 1, 'desc': u'The definitive work on the subject of C Sharp'}, {'name': u'Lisp', 'created_at': datetime.datetime(2018, 10, 13, 2, 4, 45, 538963, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 2, 4, 45, 539018, tzinfo=<UTC>), u'uploaded_by_id': 6, u'id': 9, 'desc': u'If you need this book, you should think seriously about your life choices.'}]>
>>> Book.objects.last().liked_books.values()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Book' object has no attribute 'liked_books'
>>> Book.objects.last().liked_books
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Book' object has no attribute 'liked_books'
>>> User.objects.last().liked_books.values()
<QuerySet []>
>>> User.objects.first().liked_books.values()
<QuerySet [{'name': u'C Sharp', 'created_at': datetime.datetime(2018, 10, 13, 1, 45, 54, 72745, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 1, 45, 54, 72822, tzinfo=<UTC>), u'uploaded_by_id': 1, u'id': 1, 'desc': u'The definitive work on the subject of C Sharp'}, {'name': u'Lisp', 'created_at': datetime.datetime(2018, 10, 13, 2, 4, 45, 538963, tzinfo=<UTC>), 'updated_at': datetime.datetime(2018, 10, 13, 2, 4, 45, 539018, tzinfo=<UTC>), u'uploaded_by_id': 6, u'id': 9, 'desc': u'If you need this book, you should think seriously about your life choices.'}]>
>>>